{"version":3,"sources":["images/ATG Icon.png","images/Banner.png","components/FirstNavBar.js","components/MainNavBar.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FirstNavBar","props","className","MainNavBar","class","src","Logo","alt","to","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,sC,2FCA3CD,EAAOC,QAAU,IAA0B,oC,iHCsC5BC,G,kBAnCK,SAACC,GACnB,OACE,6BACG,IACD,yBAAKC,UAAU,UACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACb,4CAEF,wBAAIA,UAAU,iBACZ,8CACiB,yCAEjB,0CACa,yCAEb,yCACY,yCAEZ,0CACa,yCAEb,yCACY,wCAEZ,0CACa,+C,4CCeVC,EAvCI,SAACF,GAClB,OACE,6BACE,yBAAKG,MAAM,eACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,QACT,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,oCACA,2CAEF,wBAAIH,MAAM,iBACR,4BACE,kBAAC,IAAD,CAAMI,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,KAAT,aAGJ,yBAAKJ,MAAM,WACT,uBAAGA,MAAM,uBACT,2CACA,+BACA,kBAAC,IAAD,CAAMI,GAAG,UAAT,cCVGC,EArBA,SAACR,GACd,OACE,4BAAQC,UAAU,eAChB,kBAAC,EAAD,MAEA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBACb,mCACA,0CACA,2BACG,IADH,0MAMA,kDCNKQ,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4936f71f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ATG Icon.959f1183.png\";","module.exports = __webpack_public_path__ + \"static/media/Banner.e297f7cb.png\";","import React from \"react\";\r\nimport \"./FirstNavBar.css\";\r\n\r\nconst FirstNavBar = (props) => {\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <nav className=\"navbar\">\r\n        <div className=\"container\">\r\n          <div className=\"logo\">\r\n            <h2>MARKET DATA</h2>\r\n          </div>\r\n          <ul className=\"list-unstyled\">\r\n            <li>\r\n              BTC $11,031.93 <span>-3.63%</span>\r\n            </li>\r\n            <li>\r\n              ETH$415.43 <span>-7.15%</span>\r\n            </li>\r\n            <li>\r\n              XRP $0.26 <span>-5.95%</span>\r\n            </li>\r\n            <li>\r\n              LTC $55.29 <span>-5.95%</span>\r\n            </li>\r\n            <li>\r\n              EOS $2.93 <span>-.35%</span>\r\n            </li>\r\n            <li>\r\n              XMR $86.27 <span>-5.13%</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FirstNavBar;\r\n","import React from \"react\";\r\nimport \"./MainNavBar.css\";\r\nimport Logo from \"../images/ATG Icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MainNavBar = (props) => {\r\n  return (\r\n    <div>\r\n      <nav class=\"main-navbar\">\r\n        <div class=\"container\">\r\n          <div class=\"logo\">\r\n            <img src={Logo} alt=\"logo\" />\r\n            <h1>Alts</h1>\r\n            <span>Together</span>\r\n          </div>\r\n          <ul class=\"list-unstyled\">\r\n            <li>\r\n              <Link to=\"/\">home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/\">about</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/\">videos</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/\">blog</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/\">contact</Link>\r\n            </li>\r\n          </ul>\r\n          <div class=\"nav-end\">\r\n            <i class=\"fa fa-search fa-xl\"></i>\r\n            <button>join us</button>\r\n            <span></span>\r\n            <Link to=\"/login\">login</Link>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainNavBar;\r\n","import React from \"react\";\r\nimport Banner from \"../images/Banner.png\";\r\nimport \"./Header.css\";\r\nimport MainNavBar from \"./MainNavBar\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className=\"main-header\">\r\n      <MainNavBar />\r\n\r\n      <div className=\"container\">\r\n        <div className=\"header-content\">\r\n          <h1>Alt</h1>\r\n          <span>Together</span>\r\n          <p>\r\n            {\" \"}\r\n            Lorem ipsum, dolor sit amet consectetur adipisicing elit. Blanditiis\r\n            commodi non perferendis soluta assumenda maxime laudantium adipisci\r\n            laboriosam id incidunt, tenetur, fugiat numquam omnis fuga...\r\n          </p>\r\n          <button>learn more</button>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\nimport FirstNavBar from \"./components/FirstNavBar\";\nimport Header from \"./components/Header\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <FirstNavBar />\n      <Header />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"font-awesome/css/font-awesome.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}